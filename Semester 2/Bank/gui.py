
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

import json
from pathlib import Path
import time
from datetime import datetime
from tkinter import font, Canvas, PhotoImage, Tk
# from tkinter import *
# Explicit imports to satisfy Flake8
from sharedpublic import gui_state,queue_dict
import threading
from queue_loader import load_data_ke_queue

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"/home/farros/Bank/build/assets/frame0")

#Load data from load_data_ke_queu
load_data_ke_queue("rekening", "rekening.json")
load_data_ke_queue("cc", "cc.json")
load_data_ke_queue("masalah", "masalah.json")

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def refresh_gui_display():
    canvas = gui_state["display_canvas"]
    
    try: #Json open file and load
        with open("last_served.json") as f: #f = file 
            data_served = json.load(f)
    except:
        data_served = {}


    canvas = gui_state["display_canvas"] #saving data from canvas to gui_state var

    for jenis in ["rekening", "cc", "masalah"]:
        q = queue_dict[jenis] #retrieve data from sharedpublic.py

        berikutnya = q.peek() 
        if berikutnya:
            kode = q.format_nomor(berikutnya['nomor'])
            canvas.itemconfig(gui_state[f"berikutnya_{jenis}"],text=kode)
        else:
            canvas.itemconfig(gui_state[f"berikutnya_{jenis}"], text="Kosong")
        if jenis in data_served:
            nomor = data_served[jenis]["nomor"]
            kode = q.format_nomor(nomor)
            canvas.itemconfig(gui_state[f"proses_{jenis}"], text=kode)
        else:
            canvas.itemconfig(gui_state[f"proses_{jenis}"], text="Kosong")



def thread_time(): #time setting
    while True:
        date_now = datetime.now()
        current_date_time = f"{date_now.strftime('%A')}, {date_now.day} {date_now.strftime('%B %Y')}" #time format
        current_clock = date_now.strftime("%H:%M:%S")

        canvas = gui_state["display_canvas"]

        #lambda expression to add functions quickly and directly , and function be concise
        canvas.after(0, lambda: canvas.itemconfig(gui_state["date_canvas"], text=current_date_time))
        canvas.after(0, lambda: canvas.itemconfig(gui_state["time_canvas"], text=current_clock))
        canvas.after(0, lambda: canvas.coords(gui_state["date_canvas"]))
        canvas.after(0, lambda: canvas.coords(gui_state["time_canvas"]))

        time.sleep(1)

def draw_gradient_rect(canvas, x1, y1, x2, y2, color1, color2, steps=100): #gradient colour
    r1, g1, b1 = canvas.winfo_rgb(color1)
    r2, g2, b2 = canvas.winfo_rgb(color2)

    r_ratio = (r2 - r1) / steps
    g_ratio = (g2 - g1) / steps
    b_ratio = (b2 - b1) / steps

    height = (y2 - y1) / steps
    for i in range(steps):
        nr = int(r1 + (r_ratio * i)) >> 8
        ng = int(g1 + (g_ratio * i)) >> 8
        nb = int(b1 + (b_ratio * i)) >> 8
        color = f"#{nr:02x}{ng:02x}{nb:02x}"
        canvas.create_rectangle(
            x1, y1 + i * height,
            x2, y1 + (i + 1) * height,
            outline=color, fill=color
        )

def close_window():
    gui_state["display_window"].destroy()  # close window

def init():
    gui_state["display_window"] = Tk()
    gui_state["display_window"].geometry("1069x698")
    gui_state["display_window"].configure(bg="#FFFFFF")

    date_now = datetime.now()
    current_date_time = f"{date_now.strftime('%A')}, {date_now.day} {date_now.strftime('%B %Y')}"
    current_clock = date_now.strftime("%H:%M:%S")

    my_font = font.Font(family="Montserrat", size=-23, weight="normal")
    jam_font = font.Font(family="Montserrat", size=-20, weight="bold")

    canvas = Canvas(
        gui_state["display_window"],
        bg="#FFFFFF",
        height=698,
        width=1069,
        bd=0,
        highlightthickness=0,
        relief="ridge"
    )
    canvas.pack()
    gui_state["display_ready"] = threading.Event()
    gui_state["display_canvas"] = canvas
    canvas = gui_state["display_canvas"]
    
    #image background and static elemen
    canvas.place(x = 0, y = 0)
    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        535.0,
        362.0,
        image=image_image_1
    )
    gui_state["image_image_1"] = image_image_1

    canvas.create_rectangle(
        0.0,
        0.0,
        1069.0,
        115.0,
        fill="#003BAA",
        outline="")

    canvas.create_text(
        412.0,
        26.0,
        anchor="nw",
        text="Queue Display",
        fill="#FFFFFF",
        font=font.Font(family="Montserrat", size=-40, weight="bold")
    )

    canvas.create_rectangle(
        62.0,
        151.0,
        228.0,
        305.0,
        draw_gradient_rect(canvas, 62.0, 151.0, 228.0, 305.0, "#7D6FFF", "#E869FF"),
        outline="")

    gui_state["berikutnya_rekening"]=canvas.create_text(
        113.0,
        215.0,
        anchor="nw",
        text="Kosong",
        fill="#FFFFFF",
        font=font.Font(family="Montserrat", size=-23, weight="normal",slant="italic")
    )

    canvas.create_text(
        75.0,
        165.0,
        anchor="nw",
        text="Antrian Berikutnya: \n   Buka Rekening",
        fill="#FFFFFF",
        font=font.Font(family="Montserrat", size=-15, weight="normal")
    )

    canvas.create_rectangle(
        267.0,
        318.0,
        433.0,
        472.0,
        draw_gradient_rect(canvas, 267.0, 318.0, 433.0, 472.0, "#E869FF", "#B200DE"),
        outline="")

    gui_state["berikutnya_cc"]=canvas.create_text(
        318.0,
        385.0,
        anchor="nw",
        text="Kosong",
        fill="#FFFFFF",
        font=font.Font(family="Montserrat", size=-23, weight="normal",slant="italic")
    )

    canvas.create_text(
        280.0,
        331.0,
        anchor="nw",
        text="Antrian Berikutnya: \n      Credit Card",
        fill="#FFFFFF",
        font=font.Font(family="Montserrat", size=-15, weight="normal")
    )

    canvas.create_rectangle(
        483.0,
        490.0,
        649.0,
        644.0,
        draw_gradient_rect(canvas, 483.0, 490.0, 649.0, 644.0, "#B200DE", "#7D6FFF"),
        outline="")

    gui_state["berikutnya_masalah"] = canvas.create_text(
        536.0,
        567.0,
        anchor="nw",
        text="Kosong",
        fill="#FFFFFF",
        font=font.Font(family="Montserrat", size=-23, weight="normal",slant="italic")
    )

    canvas.create_text(
        497.0,
        503.0,
        anchor="nw",
        text="Antrian Berikutnya: \n      Penanganan \n          Masalah",
        fill="#FFFFFF",
        font=font.Font(family="Montserrat", size=-15, weight="normal")
    )

    canvas.create_rectangle(
        732.0,
        140.0,
        890.0,
        658.0,
        fill="#85ADF7",
        outline="")

    canvas.create_text(
        762.0,
        161.0,
        anchor="nw",
        text="Dalam Proses",
        fill="#FFFFFF",
        font=font.Font(family="Montserrat", size=-15, weight="bold")
    )

    canvas.create_rectangle(
        750.0,
        204.0,
        876.0,
        248.0,
        fill="#FFFFFF",
        outline="")

    canvas.create_rectangle(
        750.0,
        274.0,
        876.0,
        318.0,
        fill="#FFFFFF",
        outline="")

    canvas.create_rectangle(
        750.0,
        344.0,
        876.0,
        388.0,
        fill="#FFFFFF",
        outline="")

    global date_canvas
    date_canvas = canvas.create_text(
        45.0,
        600.0,
        anchor="nw",
        text=current_date_time,
        fill="#212121",
        font=my_font
    )
    gui_state["date_canvas"] = date_canvas

    global jam_canvas
    jam_canvas = canvas.create_text(
        45.0,
        650.0,
        anchor="nw",
        text=current_clock,
        fill="#212121",
        font=jam_font
    )
    gui_state["time_canvas"] = jam_canvas
    
    gui_state["proses_rekening"]=canvas.create_text(
        793.0,
        217.0,
        anchor="nw",
        text="Kosong",
        fill="#000000",
        font=font.Font(family="Montserrat", size=-17, weight="normal")
    )

    gui_state["proses_cc"]=canvas.create_text(
        793.0,
        287.0,
        anchor="nw",
        text="Kosong",
        fill="#000000",
        font=font.Font(family="Montserrat", size=-17, weight="normal")
    )

    gui_state["proses_masalah"]=canvas.create_text(
        793.0,
        357.0,
        anchor="nw",
        text="Kosong",
        fill="#000000",
        font=font.Font(family="Montserrat", size=-17, weight="normal")
    )

    image_image_2 = PhotoImage(
        file=relative_to_assets("image_2.png"))
    image_2 = canvas.create_image(
        130.0,
        55.0,
        image=image_image_2
    )
    gui_state["image_image_2"] = image_image_2
    
    canvas.create_rectangle(
        323.0,
        53.0,
        404.0,
        58.0,
        fill="#FFFFFF",
        outline="")

    canvas.create_rectangle(
        302.0,
        66.0,
        404.0,
        71.0,
        fill="#FFFFFF",
        outline="")

    canvas.create_rectangle(
        345.0,
        40.0,
        404.0,
        45.0,
        fill="#FFFFFF",
        outline="")

    elips_image1 = PhotoImage(file=relative_to_assets("Ellipse 1.png"))
    canvas.create_image(
        950.0,120.0,  
        image=elips_image1,
        anchor="nw"
    )
    gui_state["elips_image1"] = elips_image1
    #gui_state[object name] = object name // for save object to gui_state and avoid to garbage collection

    elips_image2 = PhotoImage(file=relative_to_assets("Ellipse 2.png"))
    canvas.create_image(
        780.0,50.0,  
        image=elips_image2,
        anchor="nw"
    )
    gui_state["elips_image2"]=elips_image2

    elips_image3 = PhotoImage(file=relative_to_assets("Ellipse 3.png"))
    canvas.create_image(
        950.0,0,  
        image=elips_image3,
        anchor="nw"
    )
    gui_state["elips_image3"]=elips_image3
    
    gui_state["display_window"].protocol("WM_DELETE_WINDOW", close_window)
    gui_state["display_window"].resizable(False, False)
    gui_state["display_ready"].set()
    
init()
threading.Thread(target=thread_time, daemon=True).start()
refresh_gui_display()
gui_state["display_window"].mainloop()
